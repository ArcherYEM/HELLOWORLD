<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.core.tjoeun.index.member.sql.MemberMapper">

   <insert id="insertUserInfo" parameterType="map">
      insert into user (
         userEmail
          ,userPassword
          ,userName
          ,userNickname
          ,userGender
          ,userBirth
          ,userPhone
      ) values (
         #{userEmail}
          ,#{userPassword}
          ,#{userName}
          ,#{userNickname}
          ,#{userGender}
          ,#{userBirth}
          ,#{userPhone}
      )   
   </insert>
   
   <insert id="insertLoginLog" parameterType="String">
   		insert into loginLog(
   			userNickname
   		) values (
   			#{userNickname}
   		)
   </insert>
   
   <insert id="insertLoginStatus" parameterType="String">
    INSERT INTO loginStatus (
    	userNickname
    ) VALUES (
    	#{userNickname}
    )
	</insert>
   
    <update id="loginOnStatus" parameterType="String">
    	update loginStatus set
    	status = '1'
    	where userNickname = #{userNickname}
    </update>
    
    <update id="loginOffStatus" parameterType="String">
    	update loginStatus set
    	status = '0'
    	where userNickname = #{userNickname}
    </update>
   
    <select id="selectOnFriendCnt" parameterType="String" resultType="int">
    	SELECT count(*)
		FROM (
		    SELECT f.friendNickname AS userNickname
		    FROM friends f
		    JOIN loginStatus ls ON (f.friendNickname = ls.userNickname)
		    WHERE f.userNickname = #{userNickname} AND f.fStatus = '1' AND ls.status = '1'
		    UNION
		    SELECT f.userNickname
		    FROM friends f
		    JOIN loginStatus ls ON (f.userNickname = ls.userNickname)
		    WHERE f.friendNickname = #{userNickname} AND f.fStatus = '1' AND ls.status = '1'
		) AS subquery
    </select>
   
    <insert id="insertUserDotori" parameterType="String">
		insert into dotori (
			userNickname
		    ,currentDotori
		) values (
			#{userNickname}
		    ,100
		)
	</insert>
	
	<insert id="insertUserDotoriC" parameterType="map">
   		insert into dotoriC (
			userNickname
    		,dotoriCharge
    		,dotoriChargeDate
    		,dotoriChargeMethod
    		,dotoriPrice
    	) values (
			#{userNickname}
    		,100
    		,current_timestamp
    		,#{dotoriChargeMethod}
    		,#{dotoriPrice}
    	)
	</insert>
	
	<insert id="insertMiniroomBackground" parameterType="String">
   		insert into miniroomBackground (
			userNickname
    		,backgroundName
    		,backgroundPath
    	) values (
			#{userNickname}
    		,"defaultBg"
    		,"/resources/images/default/defaultBg.jpg")
	</insert>
   
	<insert id="insertMiniroomMinimi" parameterType="String">
   		insert into miniroomMinimi (
			userNickname
		    ,minimiName
		    ,minimiPath
		    ,minimiLeft
		    ,minimiTop
    	) values (
			#{userNickname}
		    ,"defaultMinimiIcon"
		    ,"/resources/images/default/defaultMinimiIcon.gif"
		    ,"390px"
		    ,"163px")
	</insert>
   
	<insert id="insertMinihomeTitle" parameterType="String">
   		insert into miniHomeTitle (
			userNickname
		    ,title
		    ,update_date
	    ) values (
			#{userNickname}
		    ,"저의 미니홈에 방문하신것을 환영합니다."
		    ,current_timestamp)
	</insert>
	
	<insert id="insertUserProfile" parameterType="String">
   		insert into profile (
			userNickname
		    ,image
		    ,msg
		    ,create_date
    	) values (
			#{userNickname}
		    ,"defaultProfile.png"
		    ,"HelloWorld에 가입하신것을 축하드립니다."
		    ,current_timestamp)
	</insert>
	
	<insert id="insertUserStorage" parameterType="String">
   		insert into userStorage (
			userNickname
		    ,category
		    ,productName
		    ,contentPath
		    ,buy_date
		    ,allocation
    	) values (
			#{userNickname}
		    ,"minimi"
		    ,"기본 미니미"
		    ,"/resources/images/default/defaultMinimiIcon.gif"
		    ,current_timestamp
		    ,1)
	</insert>
   
   <select id="selectUserInfo" parameterType="map" resultType="map">
       SELECT 
         user.userEmail
        ,user.userPassword
        ,user.userName
        ,user.userNickname
        ,user.userGender
        ,user.userBirth
        ,user.userPhone
        ,DATE_FORMAT(user.createDate, '%Y.%m.%d') AS createDate
        ,IFNULL(dotori.currentDotori, 0) AS currentDotori
    FROM user
    LEFT JOIN dotori ON user.userNickname = dotori.userNickname
    WHERE 1=1
         <if test="userEmail != null">
            and user.userEmail = #{userEmail}
         </if>
         <if test="userPassword != null">
            and user.userPassword = #{userPassword}
         </if>
         <if test="userPhone != null">
            and user.userPhone = #{userPhone}
         </if>
         <if test="userNickname != null">
            and user.userNickname = #{userNickname}
         </if>
      
   </select>
   
   <select id="selectUserId" parameterType="map" resultType="map">
      select 
         userEmail 
      from user 
      where 
         userName = #{userName} 
      and userPhone = #{userPhone} 
      <if test="userId != null">
      	and userEmail = #{userId}
      </if>
   </select>
   
   
   <update id="updatePw" parameterType="map">
	   	update user
		set
		userPassword = #{newPw}
		where
		userEmail = #{userId}
   </update>
   
   <select id="selectUserMinimi" parameterType="String" resultType="String">
		select contentPath from userStorage
		where userNickname = #{userNickname}
		and allocation = 1   
		and category = 'minimi'
   </select>
   
   <select id="selectUserName" parameterType="String" resultType="String">
   		select 
        	userName 
        from 
        	user 
        where 
          	userNickname = #{userNickname} 
   </select>
   
   <insert id="insertUserStorageSkin" parameterType="String">
		insert into 
		   userStorage (
		      userNickname
		      , category
		      , productName
		      , contentPath
		      , buy_date
		      , allocation
		   ) values (
		      #{userNickname}
		      , 'skin'
		      , 'rgb(42, 140, 168)'
		      , '기본'
		      , '2024-01-01'
		      , '1'
		   )
	</insert>
   
    <insert id="insertUserStorageMenu" parameterType="String">
		insert into 
		   userStorage (
		      userNickname
		      , category
		      , productName
		      , contentPath
		      , buy_date
		      , allocation
		   ) values (
		      #{userNickname}
		      , 'menu'
		      , 'rgb(42, 140, 168)'
		      , '기본'
		      , '2024-01-01'
		      , '1'
		   )
	</insert>
   
    <insert id="insertVisitCnt" parameterType="String">
    	insert into visitCnt (
			userNickname    	
    	) values (
    		#{userNickname}
    	)
    </insert>
    
    <select id="selectUserGender" parameterType="String" resultType="String">
    	select userGender 
    	from user 
    	where userNickname=#{userNickname}
    </select>
   
</mapper>